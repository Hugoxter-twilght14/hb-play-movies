// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAdmin {
  id        Int      @id @default(autoincrement())
  nombre    String
  correo    String   @unique
  password  String
  avatarUri String?
  createdAt DateTime @default(now())
}

model User {
  id String @id @default(cuid())
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  password String?

  userNetflix UserNetflix[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserNetflix{
  id String @id @default(cuid())
  profileName String
  avatarUrl String

  userId String
  User User @relation(fields: [userId], references: [id])

  listas      Lista[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Lista {
  id            String       @id @default(cuid())
  nombre        String
  descripcion   String?
  creadaEn      DateTime     @default(now())

  // Relación con perfil de usuario
  perfilId      String
  perfil        UserNetflix  @relation(fields: [perfilId], references: [id])

  // Relación con contenido (intermedia)
  contenidos    ListaContenido[]
}

model ListaContenido {
  id        String   @id @default(cuid())
  tipo      String   // "pelicula", "anime", "serie"
  contenidoId String // ID del contenido (se usará como string genérico)
  listaId   String
  lista     Lista    @relation(fields: [listaId], references: [id])

  agregadoEn DateTime @default(now())

  @@unique([contenidoId, listaId]) // Para evitar duplicados en una lista
}


model Movie {
  id                    String   @id @default(cuid())
  title                 String
  thumbnailUrl          String
  sliderUrl             String?
  genre                 String[]
  age                   String
  duration              String
  trailerVideo          String
  servers               Json?
  typePelicula          String
  descriptionPelicula   String
  createdAt             DateTime @default(now())
  actores               String?
  audio                 String?
  anio                  Int?
}


model PopularMovie {
  id                    String   @id @default(cuid())
  title                 String
  thumbnailUrl          String
  sliderUrl             String?
  genre                 String[]
  age                   String
  duration              String
  trailerVideo          String
  servers               Json?
  typePelicula          String
  descriptionPelicula   String
  ranking               Int
  actores               String?
  audio                 String?
  anio                  Int?
}


model Serie {
  id           String    @id @default(cuid())
  title        String
  description  String
  thumbnailUrl String
  sliderUrl    String?
  actores      String?
  audio        String?
  anio         Int?
  genre        String[]
  age          String
  duration     String
  trailerVideo String
  type         String
  createdAt    DateTime  @default(now())
  seasons      Season[]
}


model Season {
  id        String     @id @default(cuid())
  number    Int
  serieId   String
  serie     Serie      @relation(fields: [serieId], references: [id])
  episodes  Episode[]
}

model Episode {
  id        String   @id @default(cuid())
  number    Int
  title     String
  duration  String
  servers   Json?
  seasonId  String
  season    Season   @relation(fields: [seasonId], references: [id])
}

model Anime {
  id           String         @id @default(cuid())
  title        String
  description  String
  thumbnailUrl String
  sliderUrl    String?
  actores      String?
  audio        String?
  anio         Int?
  genre        String[]
  age          String
  duration     String
  trailerVideo String
  type         String
  createdAt    DateTime       @default(now())
  seasons      AnimeSeason[]
}


model AnimeSeason {
  id        String         @id @default(cuid())
  number    Int
  animeId   String
  anime     Anime          @relation(fields: [animeId], references: [id])
  episodes  AnimeEpisode[]
}

model AnimeEpisode {
  id             String   @id @default(cuid())
  number         Int
  title          String
  duration       String
  servers        Json?
  animeSeasonId  String
  animeSeason    AnimeSeason @relation(fields: [animeSeasonId], references: [id])
}
